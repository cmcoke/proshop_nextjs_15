// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This defines the Prisma client generator that creates the code used to interact with your database.
generator client {
  provider        = "prisma-client-js" // Specifies the Prisma Client for JavaScript as the generator.
  previewFeatures = ["driverAdapters"] // Enables experimental features like driverAdapters.
}

// This defines the database connection configuration.
datasource db {
  provider = "postgresql" // Specifies PostgreSQL as the database type.
  url      = env("DATABASE_URL") // Retrieves the database connection URL from environment variables.
}

// This represents the "Product" model, defining the structure of the product table in the database.
model Product {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Unique identifier, automatically generated as a UUID.
  name        String // The name of the product.
  slug        String      @unique(map: "product_slug_idx") // Ensures that the "slug" field is unique and assigns a custom name ("product_slug_idx") to the unique constraint in the database.
  category    String // The category the product belongs to.
  images      String[] // An array of strings representing image URLs of the product.
  brand       String // The brand name of the product.
  description String // A detailed description of the product.
  stock       Int // The stock quantity of the product.
  price       Decimal     @default(0) @db.Decimal(12, 2) // The price of the product, stored with up to 12 digits, 2 after the decimal point.
  rating      Decimal     @default(0) @db.Decimal(3, 2) // The product's average rating, with up to 3 digits and 2 after the decimal.
  numReviews  Int         @default(0) // The number of reviews for the product, default is 0.
  isFeatured  Boolean     @default(false) // Indicates if the product is featured, default is false.
  banner      String? // Optional URL for the product's banner image.
  createdAt   DateTime    @default(now()) @db.Timestamp(6) // Sets the "createdAt" field to store the exact timestamp with up to 6 fractional seconds precision in the database.
  OrderItem   OrderItem[] // Defines a one-to-many relationship with the OrderItem model, indicating that a product can be associated with multiple order items.
  Review      Review[] // Defines a one-to-many relationship with the Review model, indicating that a product can be associated with multiple reviews.
}

// This represents the "User" model, defining the structure of the user table.
model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Unique identifier, automatically generated as a UUID.
  name          String    @default("NO_NAME") // The name of the user, defaults to "NO_NAME".
  email         String    @unique(map: "user_email_idx") // Ensures that the "email" field is unique and assigns a custom name ("user_email_idx") to the unique constraint in the database.
  password      String? // Optional password for the user.
  role          String    @default("user") // The role of the user, defaults to "user".
  emailVerified DateTime? @db.Timestamp(6) // Optional timestamp indicating when the email was verified. It uses @db.Timestamp(6) to store the exact date and time with up to 6 digits of fractional seconds precision (microseconds).
  image         String? // Optional URL for the user's profile image.
  address       Json?     @db.Json // Optional JSON object for storing the user's address.
  paymentMethod String? // Optional string indicating the user's payment method.
  createdAt     DateTime  @default(now()) @db.Timestamp(6) // Timestamp when the user account was created, defaults to the current time. It uses @db.Timestamp(6) to store the date and time with microsecond-level precision.
  updatedAt     DateTime  @updatedAt // Automatically updates the timestamp whenever the user record is updated.
  account       Account[] // Relationship with the Account model, one user can have multiple accounts.
  session       Session[] // Relationship with the Session model, one user can have multiple sessions.
  Cart          Cart[] // Relationship with the Cart model, one user can have multiple carts.
  Order         Order[] // Relationship with the Order model, one user can have multiple orders.
  Review        Review[] // Relationship with the Review model, one user can have multiple reviews.
}

// This represents the "Account" model, defining third-party provider accounts for a user.
model Account {
  userId            String   @db.Uuid // Foreign key to link the account to a user.
  type              String // The type of account (e.g., OAuth, email).
  provider          String // The name of the provider (e.g., Google, GitHub).
  providerAccountId String // The unique identifier for the account from the provider.
  refresh_token     String? // Optional refresh token for the account.
  access_token      String? // Optional access token for the account.
  expires_at        Int? // Optional timestamp indicating when the token expires.
  token_type        String? // Optional type of the token.
  scope             String? // Optional scope of the access token.
  id_token          String? // Optional ID token.
  session_state     String? // Optional session state.
  createdAt         DateTime @default(now()) // Timestamp when the account was created, defaults to the current time.
  updatedAt         DateTime @updatedAt // Automatically updates the timestamp whenever the account record is updated.

  // Defines a relationship between the Account and User models:
  // - Links the "userId" field in this model to the "id" field in the User model.
  // - "onDelete: Cascade" means if the user is deleted, all related accounts are also deleted.
  // - "onUpdate: NoAction" prevents updates to the relationship if the User model's "id" field is updated.
  // - "map: 'account_userId_user_id_fk'" assigns a custom name to the foreign key constraint in the database for better identification.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userId_user_id_fk")

  // Creates a composite primary key using the "provider" and "providerAccountId" fields:
  // - Ensures that each combination of "provider" and "providerAccountId" is unique in the database.
  // - "map: 'account_provider_providerAccountId_pk'" gives the composite key a meaningful name in the database schema.
  @@id([provider, providerAccountId], map: "account_provider_providerAccountId_pk")
}

// This represents the "Session" model, defining active user sessions.
model Session {
  sessionToken String   @id // Unique session token, acts as the primary key.
  userId       String   @db.Uuid // Foreign key linking the session to a user.
  expires      DateTime @db.Timestamp(6) // Timestamp when the session expires. The @db.Timestamp(6) ensures that the timestamp includes up to 6 digits of fractional seconds precision (microseconds),

  // Defines a relationship between the Session and User models:
  // - The "fields" argument specifies that the "userId" field in this model is the foreign key.
  // - The "references" argument links "userId" to the "id" field in the User model.
  // - "onDelete: Cascade" ensures that when a user is deleted, all related sessions are also removed.
  // - "onUpdate: NoAction" prevents changes to the session's "userId" if the "id" field in the User model is updated.
  // - "map: 'session_userId_user_id_fk'" assigns a custom name to the foreign key constraint in the database for easier identification.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userId_user_id_fk")
}

// This represents the "VerificationToken" model, defining tokens used for email or password verification.
model VerificationToken {
  identifier String // A unique identifier for the verification token.
  token      String // The verification token itself.
  expires    DateTime // Timestamp indicating when the token expires.

  // Composite primary key combining "identifier" and "token".
  // This ensures that each combination of "identifier" and "token" is unique.
  // By combining these fields into a single key, the model guarantees that no duplicate tokens exist for the same identifier.
  @@id([identifier, token])
}

// This represents the "Cart" model, defining information about the cart including the items in the cart, prices, and the user associated with the cart.
model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // `id` is the primary key for the Cart model. It is a UUID string that is automatically generated using a database function.
  userId        String?  @db.Uuid // `userId` is an optional UUID string that references the User model. It can be null if the cart is not associated with a user.
  sessionCartId String // `sessionCartId` is a string that uniquely identifies the cart session.
  items         Json[]   @default([]) @db.Json // `items` is an array of JSON objects representing the items in the cart. It defaults to an empty array.
  itemsPrice    Decimal  @db.Decimal(12, 2) // `itemsPrice` is a decimal value representing the total price of the items in the cart. It has a precision of 12 and scale of 2.
  shippingPrice Decimal  @db.Decimal(12, 2) // `shippingPrice` is a decimal value representing the shipping cost for the cart. It has a precision of 12 and scale of 2.
  taxPrice      Decimal  @db.Decimal(12, 2) // `taxPrice` is a decimal value representing the tax cost for the cart. It has a precision of 12 and scale of 2.
  totalPrice    Decimal  @db.Decimal(12, 2) // `totalPrice` is a decimal value representing the total price of the cart, including items, shipping, and tax. It has a precision of 12 and scale of 2.
  createdAt     DateTime @default(now()) @db.Timestamp(6) // `createdAt` is a timestamp representing the date and time the cart was created. It defaults to the current time and has microsecond precision.

  // `user` establishes a relation between the Cart model and the User model.
  // It references the `id` field in the User model and is optional.
  // If a user is deleted, the cart will also be deleted (onDelete: Cascade).
  // If the user's ID is updated, no action is taken on the cart (onUpdate: NoAction).
  // The relation is mapped to the foreign key constraint `cart_userId_user_id_fk`.
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cart_userId_user_id_fk")
}

// The Order model defines the structure of an order in the database.
model Order {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // The unique identifier for the order. It is generated using a random UUID.
  userId          String    @db.Uuid // The unique identifier for the user associated with the order.
  shippingAddress Json      @db.Json // The JSON object containing the shipping address for the order.
  paymentMethod   String // The payment method used for the order.
  paymentResult   Json?     @db.Json // An optional JSON object containing the payment result information.
  itemsPrice      Decimal   @db.Decimal(12, 2) // The total price of the items in the order, with a precision of 12 and scale of 2.
  shippingPrice   Decimal   @db.Decimal(12, 2) // The shipping price for the order, with a precision of 12 and scale of 2.
  taxPrice        Decimal   @db.Decimal(12, 2) // The tax price for the order, with a precision of 12 and scale of 2.
  totalPrice      Decimal   @db.Decimal(12, 2) // The total price of the order, with a precision of 12 and scale of 2.
  isPaid          Boolean   @default(false) // Indicates whether the order has been paid for. Defaults to false.
  paidAt          DateTime? @db.Timestamp(6) // An optional timestamp indicating when the order was paid.
  isDelivered     Boolean   @default(false) // Indicates whether the order has been delivered. Defaults to false.
  deliveredAt     DateTime? @db.Timestamp(6) // An optional timestamp indicating when the order was delivered.
  createdAt       DateTime  @default(now()) @db.Timestamp(6) // The timestamp indicating when the order was created. Defaults to the current time.

  // Defines a relation between the Order model and the User model.
  // The `user` field is a foreign key that references the `id` field in the User model.
  // The `onDelete: Cascade` option means that when a user is deleted, all their associated orders will also be deleted.
  // The `onUpdate: NoAction` option means that when a user's ID is updated, no action will be taken on the associated orders.
  // The `map: "order_userId_user_id_fk"` option specifies the name of the foreign key constraint in the database.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_userId_user_id_fk")

  orderitems OrderItem[] // An array of OrderItem objects representing the items in the order.
}

// The OrderItem model defines the structure of an order item in the database.
model OrderItem {
  orderId   String  @db.Uuid // The unique identifier for the order associated with this order item.
  productId String  @db.Uuid // The unique identifier for the product associated with this order item.
  qty       Int // The quantity of the product in the order item.
  price     Decimal @db.Decimal(12, 2) // The price of the product in the order item, with a precision of 12 and scale of 2.
  name      String // The name of the product in the order item.
  slug      String // The slug (URL-friendly identifier) for the product in the order item.
  image     String // The URL of the image for the product in the order item.

  // Defines a relation between the OrderItem model and the Order model.
  // The `order` field is a foreign key that references the `id` field in the Order model.
  // The `onDelete: Cascade` option means that when an order is deleted, all its associated order items will also be deleted.
  // The `onUpdate: NoAction` option means that when an order's ID is updated, no action will be taken on the associated order items.
  // The `map: "orderItems_orderId_order_id_fk"` option specifies the name of the foreign key constraint in the database.
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orderItems_orderId_order_id_fk")

  // Defines a relation between the OrderItem model and the Product model.
  // The `product` field is a foreign key that references the `id` field in the Product model.
  // The `onDelete: Cascade` option means that when a product is deleted, all its associated order items will also be deleted.
  // The `onUpdate: NoAction` option means that when a product's ID is updated, no action will be taken on the associated order items.
  // The `map: "orderItems_productId_product_id_fk"` option specifies the name of the foreign key constraint in the database.
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orderItems_productId_product_id_fk")

  // Defines a composite primary key for the OrderItem model, consisting of the `orderId` and `productId` fields.
  // The `map: "orderItems_orderId_productId_pk"` option specifies the name of the primary key constraint in the database.
  @@id([orderId, productId], map: "orderItems_orderId_productId_pk")
}

// The Review model defines the structure of a product review in the database.
model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // The unique identifier for the review, generated automatically using a random UUID.
  userId             String   @db.Uuid // The unique identifier of the user who wrote the review.
  productId          String   @db.Uuid // The unique identifier of the product being reviewed.
  rating             Int // The rating given to the product by the user, typically on a scale (e.g., 1 to 5).
  title              String // The title of the review, summarizing the user's experience.
  description        String // The full text of the review, containing the user's detailed feedback.
  isVerifiedPurchase Boolean  @default(true) // Indicates whether the review is from a verified purchase. Defaults to `true`.
  createdAt          DateTime @default(now()) @db.Timestamp(6) // The timestamp when the review was created. Defaults to the current timestamp with microsecond precision.

  // Defines a relation between the Review model and the Product model.
  // The `product` field is a foreign key that references the `id` field in the Product model.
  // The `onDelete: Cascade` option means that when a product is deleted, all its associated reviews will also be deleted.
  // The `onUpdate: NoAction` option means that when a product's ID is updated, no action will be taken on the associated reviews.
  // The `map: "reviews_productId_product_id_fk"` option specifies the name of the foreign key constraint in the database.
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_productId_product_id_fk")

  // Defines a relation between the Review model and the User model.
  // The `user` field is a foreign key that references the `id` field in the User model.
  // The `onDelete: Cascade` option means that when a user is deleted, all their reviews will also be deleted.
  // The `onUpdate: NoAction` option means that when a user's ID is updated, no action will be taken on the associated reviews.
  // The `map: "reviews_userId_user_id_fk"` option specifies the name of the foreign key constraint in the database.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_userId_user_id_fk")
}
